import { SystemHealth, Experiment, ExperimentResult, ExperimentStep, User, Analytics } from '@/types/api';

export const mockUser: User = {
  userId: 'user-123',
  email: 'admin@chaosengineering.io',
  name: 'Admin User',
  role: 'ADMIN',
};

export const mockSystemHealth: SystemHealth = {
  status: 'healthy',
  targetInstanceCount: 2,
  healthyInstances: 2,
  loadBalancerStatus: 'active',
  lastChecked: new Date().toISOString(),
};

export const mockExperiments: Experiment[] = [
  {
    experimentId: 'exp-2024-01-15-abc123',
    status: 'COMPLETED',
    targetType: 'AUTO_SCALING_GROUP',
    targetId: 'chaos-target-asg',
    configuration: {
      dryRun: false,
      expectedHealthyInstances: 2,
      failureType: 'INSTANCE_TERMINATION',
    },
    startTime: '2024-01-15T10:30:00Z',
    endTime: '2024-01-15T10:35:00Z',
    duration: 300,
    createdBy: 'admin@chaosengineering.io',
    metadata: {
      name: 'Instance Termination Test',
      hypothesis: 'System should auto-recover within 2 minutes',
      owner: 'Platform Team',
    },
  },
  {
    experimentId: 'exp-2024-01-15-def456',
    status: 'COMPLETED',
    targetType: 'AUTO_SCALING_GROUP',
    targetId: 'chaos-target-asg',
    configuration: {
      dryRun: false,
      expectedHealthyInstances: 2,
      failureType: 'INSTANCE_TERMINATION',
    },
    startTime: '2024-01-14T14:20:00Z',
    endTime: '2024-01-14T14:25:00Z',
    duration: 300,
    createdBy: 'admin@chaosengineering.io',
  },
  {
    experimentId: 'exp-2024-01-14-ghi789',
    status: 'FAILED',
    targetType: 'AUTO_SCALING_GROUP',
    targetId: 'chaos-target-asg',
    configuration: {
      dryRun: false,
      expectedHealthyInstances: 2,
      failureType: 'INSTANCE_TERMINATION',
    },
    startTime: '2024-01-14T09:15:00Z',
    endTime: '2024-01-14T09:20:00Z',
    duration: 300,
    createdBy: 'admin@chaosengineering.io',
    metadata: {
      name: 'Recovery Failure Test',
      hypothesis: 'Testing recovery under load',
    },
  },
  {
    experimentId: 'exp-2024-01-13-jkl012',
    status: 'COMPLETED',
    targetType: 'AUTO_SCALING_GROUP',
    targetId: 'chaos-target-asg',
    configuration: {
      dryRun: true,
      expectedHealthyInstances: 2,
      failureType: 'INSTANCE_TERMINATION',
    },
    startTime: '2024-01-13T16:45:00Z',
    endTime: '2024-01-13T16:50:00Z',
    duration: 300,
    createdBy: 'admin@chaosengineering.io',
  },
  {
    experimentId: 'exp-2024-01-13-mno345',
    status: 'COMPLETED',
    targetType: 'AUTO_SCALING_GROUP',
    targetId: 'chaos-target-asg',
    configuration: {
      dryRun: false,
      expectedHealthyInstances: 2,
      failureType: 'INSTANCE_TERMINATION',
    },
    startTime: '2024-01-12T11:30:00Z',
    endTime: '2024-01-12T11:35:00Z',
    duration: 300,
    createdBy: 'admin@chaosengineering.io',
  },
];

export const mockResults: ExperimentResult[] = [
  {
    resultId: 'res-2024-01-15-xyz789',
    experimentId: 'exp-2024-01-15-abc123',
    timestamp: '2024-01-15T10:35:00Z',
    success: true,
    targetInstance: 'i-0abc123def456',
    recoveryTime: 125,
    metricsSnapshot: {
      healthyHostCount: 2,
      responseTime: 45,
      errorRate: 0,
    },
    logs: [
      '[10:30:00] Starting chaos experiment',
      '[10:30:15] Pre-experiment health check: PASSED',
      '[10:30:30] Selected target instance: i-0abc123def456',
      '[10:30:45] Instance terminated',
      '[10:31:00] Waiting for recovery...',
      '[10:33:05] New instance launched: i-0xyz789abc123',
      '[10:34:50] Post-experiment health check: PASSED',
      '[10:35:00] Experiment completed successfully',
    ],
  },
  {
    resultId: 'res-2024-01-15-uvw456',
    experimentId: 'exp-2024-01-15-def456',
    timestamp: '2024-01-14T14:25:00Z',
    success: true,
    targetInstance: 'i-0def456ghi789',
    recoveryTime: 138,
    metricsSnapshot: {
      healthyHostCount: 2,
      responseTime: 52,
      errorRate: 0,
    },
    logs: [
      '[14:20:00] Starting chaos experiment',
      '[14:20:20] Pre-experiment health check: PASSED',
      '[14:20:40] Instance terminated',
      '[14:22:18] New instance launched',
      '[14:24:50] Post-experiment health check: PASSED',
      '[14:25:00] Experiment completed successfully',
    ],
  },
  {
    resultId: 'res-2024-01-14-rst123',
    experimentId: 'exp-2024-01-14-ghi789',
    timestamp: '2024-01-14T09:20:00Z',
    success: false,
    targetInstance: 'i-0ghi789jkl012',
    recoveryTime: 0,
    metricsSnapshot: {
      healthyHostCount: 1,
      responseTime: 180,
      errorRate: 15,
    },
    logs: [
      '[09:15:00] Starting chaos experiment',
      '[09:15:15] Pre-experiment health check: PASSED',
      '[09:15:30] Instance terminated',
      '[09:17:00] Waiting for recovery...',
      '[09:19:45] Post-experiment health check: FAILED',
      '[09:20:00] Experiment failed: Insufficient healthy instances',
    ],
  },
];

export const mockExperimentSteps: ExperimentStep[] = [
  {
    stepName: 'Pre-Experiment Health Check',
    status: 'completed',
    startTime: '2024-01-15T10:30:00Z',
    endTime: '2024-01-15T10:30:15Z',
    duration: 15,
    output: { status: 'healthy', healthyInstances: 2 },
  },
  {
    stepName: 'Target Selection',
    status: 'completed',
    startTime: '2024-01-15T10:30:15Z',
    endTime: '2024-01-15T10:30:30Z',
    duration: 15,
    output: { targetInstance: 'i-0abc123def456' },
  },
  {
    stepName: 'Failure Injection',
    status: 'completed',
    startTime: '2024-01-15T10:30:30Z',
    endTime: '2024-01-15T10:30:45Z',
    duration: 15,
    output: { action: 'instance_terminated' },
  },
  {
    stepName: 'Recovery Wait',
    status: 'completed',
    startTime: '2024-01-15T10:30:45Z',
    endTime: '2024-01-15T10:33:05Z',
    duration: 140,
    output: { newInstance: 'i-0xyz789abc123' },
  },
  {
    stepName: 'Post-Experiment Health Validation',
    status: 'completed',
    startTime: '2024-01-15T10:33:05Z',
    endTime: '2024-01-15T10:34:50Z',
    duration: 105,
    output: { status: 'healthy', healthyInstances: 2 },
  },
  {
    stepName: 'Results Recording',
    status: 'completed',
    startTime: '2024-01-15T10:34:50Z',
    endTime: '2024-01-15T10:35:00Z',
    duration: 10,
    output: { resultId: 'res-2024-01-15-xyz789' },
  },
];

export const mockAnalytics: Analytics = {
  totalExperiments: 47,
  successRate: 89,
  averageRecoveryTime: 132,
  last24hExperiments: 5,
  experimentsOverTime: [
    { date: '2024-01-01', count: 2 },
    { date: '2024-01-02', count: 3 },
    { date: '2024-01-03', count: 1 },
    { date: '2024-01-04', count: 4 },
    { date: '2024-01-05', count: 2 },
    { date: '2024-01-06', count: 3 },
    { date: '2024-01-07', count: 5 },
    { date: '2024-01-08', count: 2 },
    { date: '2024-01-09', count: 4 },
    { date: '2024-01-10', count: 3 },
    { date: '2024-01-11', count: 2 },
    { date: '2024-01-12', count: 4 },
    { date: '2024-01-13', count: 3 },
    { date: '2024-01-14', count: 5 },
    { date: '2024-01-15', count: 4 },
  ],
  successFailureByWeek: [
    { week: 'Week 1', success: 12, failure: 2 },
    { week: 'Week 2', success: 15, failure: 1 },
    { week: 'Week 3', success: 10, failure: 3 },
    { week: 'Week 4', success: 5, failure: 0 },
  ],
  experimentTypeDistribution: [
    { type: 'Instance Termination', count: 35 },
    { type: 'Network Latency', count: 8 },
    { type: 'CPU Stress', count: 4 },
  ],
};
